"""
Django settings for ai_textbook_query_system project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

import os
from datetime import timedelta
import dj_database_url
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent





# settings.py

# Media files (user-uploaded content)
MEDIA_URL = '/media/'  # URL to access uploaded media files

# This is the folder where files will be saved locally
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Store media files in 'media' folder
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-bhl=nm+s4wp(^ym7kwho3vk&7(=-np*&g98bxesq$zzkf^j2m@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

STATIC_URL = '/static/'


if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# React Build static folder
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend/static'),
]

# Location of collected static files (used when running `collectstatic`)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'api.apps.ApiConfig',
    'groqapi.apps.GroqapiConfig',
    'frontend.apps.FrontendConfig',
    'corsheaders',
  #  'rest_framework_simplejwt'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware'
]

ROOT_URLCONF = 'ai_textbook_query_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ai_textbook_query_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default= 'postgresql://postgres:postgres@localhost:5432/ai_textbook_query_system',
        conn_max_age=600
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    # other domains
]

AUTH_USER_MODEL = 'api.UserProfile'
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True


"""REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
      'DEFAULT_PERMISSION_CLASSES': [
        #'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.AllowAny',  # Remove for now
    ],
    # Other settings if needed
}"""

GROQ_API_KEY = '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'




CSRF_COOKIE_NAME = 'csrftoken'

# Ensure the CSRF cookie is accessible on the frontend (set to True in production with HTTPS)
CSRF_COOKIE_SECURE = False  # Set to True for production with HTTPS
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript to read the CSRF cookie
CSRF_COOKIE_SAMESITE = 'Lax'  # or 'Strict', depending on your needs

# You may need to whitelist the trusted origins
CSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000/']


DATA_UPLOAD_MAX_MEMORY_SIZE = 100 * 1024 * 1024  # 100MB


CELERY_BROKER_URL = 'amqp://guest:guest@localhost:5672//'  # RabbitMQ as broker
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # Redis as result backend
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'


CELERY_WORKER_CONCURRENCY = 4  # Number of simultaneous workers
CELERY_TASK_ACKS_LATE = True  # Enable task retries on failure
CELERY_PREFETCH_MULTIPLIER = 1  # Limit prefetch to avoid task starvation
CELERY_TASK_TIME_LIMIT = 300  # Maximum time (in seconds) a task can run
CELERY_TASK_SOFT_TIME_LIMIT = 270  # Grace period before forcefully terminating
